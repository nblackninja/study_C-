#include <iostream> 
#include <string> 
using namespace std;

class Human // класс
{ 
private:
	int age;

public:
	int height; // свойства этого класса (поля класса)
	string name;
	void PrintClass()
	{
		cout << "Имя: " << name << endl << "Возраст: " << age << endl << "Рост: " << height << endl;
	}

	int GetAge() // геттер
	{
		return age;
	}
	void SetAge(int valueAge) // сеттер
	{
		age = valueAge;
	}

};

int main()
{
	setlocale(LC_ALL, "Rus");

	Human firstHuman; // объект класса
	firstHuman.SetAge(17);
	firstHuman.name = "Никита";
	firstHuman.height = 180;

	cout << firstHuman.GetAge() << endl;
	cout << firstHuman.name << endl;
	cout << firstHuman.height << endl;

	cout << "_________" << endl;

	Human secondHuman; // объект класса
	secondHuman.SetAge(16);
	secondHuman.name = "Илья";
	secondHuman.height = 175;

	secondHuman.PrintClass();

	system("pause");
	return 0;
}

/*

инакпсуляция - принцип не зависимости данных. То есть мы можем работать с внешними данными, но что-то может быть скрыто от нас.
наследование - возмонжость наследовать функционал объекта и дополнять их
полиморфизм - возможность реагировать по разнному на разные данные


Класс - по сути, пользовательский тип данных. Шаблон, который описывает переменную
class Name {
	
};

Объект - когда мы создаем экземпляр перемонной этого класса
Human firstHuman;

Модификатор доступа - устанавливает доступность для полей класса.
public: - открыто всем
private: - ставится по умолчанию. Доступ закрыт к полям класса
protected: - закрыт, но свои особенности при наследовании.

Методы класса - функции, которые описывают, как работать с данными класса. Описывается прямо в самом классе.
	все переменные класса находятся в области видимости самой функции

Геттеры и сеттеры - это прмиер инкапсуляции. Другой разработчик не имеет доступ напрямую к данным, а может работать только через мной заданный интерфейс
Давать публичный доступ к свойствам класс - не принято
Геттер - получает данные (get - получать).
Сеттер - устанвливает данные (set - установить)
Описываются в public. 

*/